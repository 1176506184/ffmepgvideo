{"version":3,"file":"ffmpeg.js","sources":["../node_modules/@ffmpeg/ffmpeg/dist/esm/const.js","../node_modules/@ffmpeg/ffmpeg/dist/esm/utils.js","../node_modules/@ffmpeg/ffmpeg/dist/esm/errors.js","../node_modules/@ffmpeg/ffmpeg/dist/esm/classes.js","../node_modules/@ffmpeg/ffmpeg/dist/esm/types.js","../node_modules/@ffmpeg/util/dist/esm/index.js","../src/utils.js","../src/index.js"],"sourcesContent":["export const MIME_TYPE_JAVASCRIPT = \"text/javascript\";\nexport const MIME_TYPE_WASM = \"application/wasm\";\nexport const CORE_VERSION = \"0.12.9\";\nexport const CORE_URL = `https://unpkg.com/@ffmpeg/core@${CORE_VERSION}/dist/umd/ffmpeg-core.js`;\nexport var FFMessageType;\n(function (FFMessageType) {\n    FFMessageType[\"LOAD\"] = \"LOAD\";\n    FFMessageType[\"EXEC\"] = \"EXEC\";\n    FFMessageType[\"FFPROBE\"] = \"FFPROBE\";\n    FFMessageType[\"WRITE_FILE\"] = \"WRITE_FILE\";\n    FFMessageType[\"READ_FILE\"] = \"READ_FILE\";\n    FFMessageType[\"DELETE_FILE\"] = \"DELETE_FILE\";\n    FFMessageType[\"RENAME\"] = \"RENAME\";\n    FFMessageType[\"CREATE_DIR\"] = \"CREATE_DIR\";\n    FFMessageType[\"LIST_DIR\"] = \"LIST_DIR\";\n    FFMessageType[\"DELETE_DIR\"] = \"DELETE_DIR\";\n    FFMessageType[\"ERROR\"] = \"ERROR\";\n    FFMessageType[\"DOWNLOAD\"] = \"DOWNLOAD\";\n    FFMessageType[\"PROGRESS\"] = \"PROGRESS\";\n    FFMessageType[\"LOG\"] = \"LOG\";\n    FFMessageType[\"MOUNT\"] = \"MOUNT\";\n    FFMessageType[\"UNMOUNT\"] = \"UNMOUNT\";\n})(FFMessageType || (FFMessageType = {}));\n","/**\n * Generate an unique message ID.\n */\nexport const getMessageID = (() => {\n    let messageID = 0;\n    return () => messageID++;\n})();\n","export const ERROR_UNKNOWN_MESSAGE_TYPE = new Error(\"unknown message type\");\nexport const ERROR_NOT_LOADED = new Error(\"ffmpeg is not loaded, call `await ffmpeg.load()` first\");\nexport const ERROR_TERMINATED = new Error(\"called FFmpeg.terminate()\");\nexport const ERROR_IMPORT_FAILURE = new Error(\"failed to import ffmpeg-core.js\");\n","import { FFMessageType } from \"./const.js\";\nimport { getMessageID } from \"./utils.js\";\nimport { ERROR_TERMINATED, ERROR_NOT_LOADED } from \"./errors.js\";\n/**\n * Provides APIs to interact with ffmpeg web worker.\n *\n * @example\n * ```ts\n * const ffmpeg = new FFmpeg();\n * ```\n */\nexport class FFmpeg {\n    #worker = null;\n    /**\n     * #resolves and #rejects tracks Promise resolves and rejects to\n     * be called when we receive message from web worker.\n     */\n    #resolves = {};\n    #rejects = {};\n    #logEventCallbacks = [];\n    #progressEventCallbacks = [];\n    loaded = false;\n    /**\n     * register worker message event handlers.\n     */\n    #registerHandlers = () => {\n        if (this.#worker) {\n            this.#worker.onmessage = ({ data: { id, type, data }, }) => {\n                switch (type) {\n                    case FFMessageType.LOAD:\n                        this.loaded = true;\n                        this.#resolves[id](data);\n                        break;\n                    case FFMessageType.MOUNT:\n                    case FFMessageType.UNMOUNT:\n                    case FFMessageType.EXEC:\n                    case FFMessageType.FFPROBE:\n                    case FFMessageType.WRITE_FILE:\n                    case FFMessageType.READ_FILE:\n                    case FFMessageType.DELETE_FILE:\n                    case FFMessageType.RENAME:\n                    case FFMessageType.CREATE_DIR:\n                    case FFMessageType.LIST_DIR:\n                    case FFMessageType.DELETE_DIR:\n                        this.#resolves[id](data);\n                        break;\n                    case FFMessageType.LOG:\n                        this.#logEventCallbacks.forEach((f) => f(data));\n                        break;\n                    case FFMessageType.PROGRESS:\n                        this.#progressEventCallbacks.forEach((f) => f(data));\n                        break;\n                    case FFMessageType.ERROR:\n                        this.#rejects[id](data);\n                        break;\n                }\n                delete this.#resolves[id];\n                delete this.#rejects[id];\n            };\n        }\n    };\n    /**\n     * Generic function to send messages to web worker.\n     */\n    #send = ({ type, data }, trans = [], signal) => {\n        if (!this.#worker) {\n            return Promise.reject(ERROR_NOT_LOADED);\n        }\n        return new Promise((resolve, reject) => {\n            const id = getMessageID();\n            this.#worker && this.#worker.postMessage({ id, type, data }, trans);\n            this.#resolves[id] = resolve;\n            this.#rejects[id] = reject;\n            signal?.addEventListener(\"abort\", () => {\n                reject(new DOMException(`Message # ${id} was aborted`, \"AbortError\"));\n            }, { once: true });\n        });\n    };\n    on(event, callback) {\n        if (event === \"log\") {\n            this.#logEventCallbacks.push(callback);\n        }\n        else if (event === \"progress\") {\n            this.#progressEventCallbacks.push(callback);\n        }\n    }\n    off(event, callback) {\n        if (event === \"log\") {\n            this.#logEventCallbacks = this.#logEventCallbacks.filter((f) => f !== callback);\n        }\n        else if (event === \"progress\") {\n            this.#progressEventCallbacks = this.#progressEventCallbacks.filter((f) => f !== callback);\n        }\n    }\n    /**\n     * Loads ffmpeg-core inside web worker. It is required to call this method first\n     * as it initializes WebAssembly and other essential variables.\n     *\n     * @category FFmpeg\n     * @returns `true` if ffmpeg core is loaded for the first time.\n     */\n    load = ({ classWorkerURL, ...config } = {}, { signal } = {}) => {\n        if (!this.#worker) {\n            this.#worker = classWorkerURL ?\n                new Worker(new URL(classWorkerURL, import.meta.url), {\n                    type: \"module\",\n                }) :\n                // We need to duplicated the code here to enable webpack\n                // to bundle worekr.js here.\n                new Worker(new URL(\"./worker.js\", import.meta.url), {\n                    type: \"module\",\n                });\n            this.#registerHandlers();\n        }\n        return this.#send({\n            type: FFMessageType.LOAD,\n            data: config,\n        }, undefined, signal);\n    };\n    /**\n     * Execute ffmpeg command.\n     *\n     * @remarks\n     * To avoid common I/O issues, [\"-nostdin\", \"-y\"] are prepended to the args\n     * by default.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * await ffmpeg.writeFile(\"video.avi\", ...);\n     * // ffmpeg -i video.avi video.mp4\n     * await ffmpeg.exec([\"-i\", \"video.avi\", \"video.mp4\"]);\n     * const data = ffmpeg.readFile(\"video.mp4\");\n     * ```\n     *\n     * @returns `0` if no error, `!= 0` if timeout (1) or error.\n     * @category FFmpeg\n     */\n    exec = (\n    /** ffmpeg command line args */\n    args, \n    /**\n     * milliseconds to wait before stopping the command execution.\n     *\n     * @defaultValue -1\n     */\n    timeout = -1, { signal } = {}) => this.#send({\n        type: FFMessageType.EXEC,\n        data: { args, timeout },\n    }, undefined, signal);\n    /**\n     * Execute ffprobe command.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * await ffmpeg.writeFile(\"video.avi\", ...);\n     * // Getting duration of a video in seconds: ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 video.avi -o output.txt\n     * await ffmpeg.ffprobe([\"-v\", \"error\", \"-show_entries\", \"format=duration\", \"-of\", \"default=noprint_wrappers=1:nokey=1\", \"video.avi\", \"-o\", \"output.txt\"]);\n     * const data = ffmpeg.readFile(\"output.txt\");\n     * ```\n     *\n     * @returns `0` if no error, `!= 0` if timeout (1) or error.\n     * @category FFmpeg\n     */\n    ffprobe = (\n    /** ffprobe command line args */\n    args, \n    /**\n     * milliseconds to wait before stopping the command execution.\n     *\n     * @defaultValue -1\n     */\n    timeout = -1, { signal } = {}) => this.#send({\n        type: FFMessageType.FFPROBE,\n        data: { args, timeout },\n    }, undefined, signal);\n    /**\n     * Terminate all ongoing API calls and terminate web worker.\n     * `FFmpeg.load()` must be called again before calling any other APIs.\n     *\n     * @category FFmpeg\n     */\n    terminate = () => {\n        const ids = Object.keys(this.#rejects);\n        // rejects all incomplete Promises.\n        for (const id of ids) {\n            this.#rejects[id](ERROR_TERMINATED);\n            delete this.#rejects[id];\n            delete this.#resolves[id];\n        }\n        if (this.#worker) {\n            this.#worker.terminate();\n            this.#worker = null;\n            this.loaded = false;\n        }\n    };\n    /**\n     * Write data to ffmpeg.wasm.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * await ffmpeg.writeFile(\"video.avi\", await fetchFile(\"../video.avi\"));\n     * await ffmpeg.writeFile(\"text.txt\", \"hello world\");\n     * ```\n     *\n     * @category File System\n     */\n    writeFile = (path, data, { signal } = {}) => {\n        const trans = [];\n        if (data instanceof Uint8Array) {\n            trans.push(data.buffer);\n        }\n        return this.#send({\n            type: FFMessageType.WRITE_FILE,\n            data: { path, data },\n        }, trans, signal);\n    };\n    mount = (fsType, options, mountPoint) => {\n        const trans = [];\n        return this.#send({\n            type: FFMessageType.MOUNT,\n            data: { fsType, options, mountPoint },\n        }, trans);\n    };\n    unmount = (mountPoint) => {\n        const trans = [];\n        return this.#send({\n            type: FFMessageType.UNMOUNT,\n            data: { mountPoint },\n        }, trans);\n    };\n    /**\n     * Read data from ffmpeg.wasm.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * const data = await ffmpeg.readFile(\"video.mp4\");\n     * ```\n     *\n     * @category File System\n     */\n    readFile = (path, \n    /**\n     * File content encoding, supports two encodings:\n     * - utf8: read file as text file, return data in string type.\n     * - binary: read file as binary file, return data in Uint8Array type.\n     *\n     * @defaultValue binary\n     */\n    encoding = \"binary\", { signal } = {}) => this.#send({\n        type: FFMessageType.READ_FILE,\n        data: { path, encoding },\n    }, undefined, signal);\n    /**\n     * Delete a file.\n     *\n     * @category File System\n     */\n    deleteFile = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.DELETE_FILE,\n        data: { path },\n    }, undefined, signal);\n    /**\n     * Rename a file or directory.\n     *\n     * @category File System\n     */\n    rename = (oldPath, newPath, { signal } = {}) => this.#send({\n        type: FFMessageType.RENAME,\n        data: { oldPath, newPath },\n    }, undefined, signal);\n    /**\n     * Create a directory.\n     *\n     * @category File System\n     */\n    createDir = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.CREATE_DIR,\n        data: { path },\n    }, undefined, signal);\n    /**\n     * List directory contents.\n     *\n     * @category File System\n     */\n    listDir = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.LIST_DIR,\n        data: { path },\n    }, undefined, signal);\n    /**\n     * Delete an empty directory.\n     *\n     * @category File System\n     */\n    deleteDir = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.DELETE_DIR,\n        data: { path },\n    }, undefined, signal);\n}\n","export var FFFSType;\n(function (FFFSType) {\n    FFFSType[\"MEMFS\"] = \"MEMFS\";\n    FFFSType[\"NODEFS\"] = \"NODEFS\";\n    FFFSType[\"NODERAWFS\"] = \"NODERAWFS\";\n    FFFSType[\"IDBFS\"] = \"IDBFS\";\n    FFFSType[\"WORKERFS\"] = \"WORKERFS\";\n    FFFSType[\"PROXYFS\"] = \"PROXYFS\";\n})(FFFSType || (FFFSType = {}));\n","import { ERROR_RESPONSE_BODY_READER, ERROR_INCOMPLETED_DOWNLOAD, } from \"./errors.js\";\nimport { HeaderContentLength } from \"./const.js\";\nconst readFromBlobOrFile = (blob) => new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n        const { result } = fileReader;\n        if (result instanceof ArrayBuffer) {\n            resolve(new Uint8Array(result));\n        }\n        else {\n            resolve(new Uint8Array());\n        }\n    };\n    fileReader.onerror = (event) => {\n        reject(Error(`File could not be read! Code=${event?.target?.error?.code || -1}`));\n    };\n    fileReader.readAsArrayBuffer(blob);\n});\n/**\n * An util function to fetch data from url string, base64, URL, File or Blob format.\n *\n * Examples:\n * ```ts\n * // URL\n * await fetchFile(\"http://localhost:3000/video.mp4\");\n * // base64\n * await fetchFile(\"data:<type>;base64,wL2dvYWwgbW9yZ...\");\n * // URL\n * await fetchFile(new URL(\"video.mp4\", import.meta.url));\n * // File\n * fileInput.addEventListener('change', (e) => {\n *   await fetchFile(e.target.files[0]);\n * });\n * // Blob\n * const blob = new Blob(...);\n * await fetchFile(blob);\n * ```\n */\nexport const fetchFile = async (file) => {\n    let data;\n    if (typeof file === \"string\") {\n        /* From base64 format */\n        if (/data:_data\\/([a-zA-Z]*);base64,([^\"]*)/.test(file)) {\n            data = atob(file.split(\",\")[1])\n                .split(\"\")\n                .map((c) => c.charCodeAt(0));\n            /* From remote server/URL */\n        }\n        else {\n            data = await (await fetch(file)).arrayBuffer();\n        }\n    }\n    else if (file instanceof URL) {\n        data = await (await fetch(file)).arrayBuffer();\n    }\n    else if (file instanceof File || file instanceof Blob) {\n        data = await readFromBlobOrFile(file);\n    }\n    else {\n        return new Uint8Array();\n    }\n    return new Uint8Array(data);\n};\n/**\n * importScript dynamically import a script, useful when you\n * want to use different versions of ffmpeg.wasm based on environment.\n *\n * Example:\n *\n * ```ts\n * await importScript(\"http://localhost:3000/ffmpeg.js\");\n * ```\n */\nexport const importScript = async (url) => new Promise((resolve) => {\n    const script = document.createElement(\"script\");\n    const eventHandler = () => {\n        script.removeEventListener(\"load\", eventHandler);\n        resolve();\n    };\n    script.src = url;\n    script.type = \"text/javascript\";\n    script.addEventListener(\"load\", eventHandler);\n    document.getElementsByTagName(\"head\")[0].appendChild(script);\n});\n/**\n * Download content of a URL with progress.\n *\n * Progress only works when Content-Length is provided by the server.\n *\n */\nexport const downloadWithProgress = async (url, cb) => {\n    const resp = await fetch(url);\n    let buf;\n    try {\n        // Set total to -1 to indicate that there is not Content-Type Header.\n        const total = parseInt(resp.headers.get(HeaderContentLength) || \"-1\");\n        const reader = resp.body?.getReader();\n        if (!reader)\n            throw ERROR_RESPONSE_BODY_READER;\n        const chunks = [];\n        let received = 0;\n        for (;;) {\n            const { done, value } = await reader.read();\n            const delta = value ? value.length : 0;\n            if (done) {\n                if (total != -1 && total !== received)\n                    throw ERROR_INCOMPLETED_DOWNLOAD;\n                cb && cb({ url, total, received, delta, done });\n                break;\n            }\n            chunks.push(value);\n            received += delta;\n            cb && cb({ url, total, received, delta, done });\n        }\n        const data = new Uint8Array(received);\n        let position = 0;\n        for (const chunk of chunks) {\n            data.set(chunk, position);\n            position += chunk.length;\n        }\n        buf = data.buffer;\n    }\n    catch (e) {\n        console.log(`failed to send download progress event: `, e);\n        // Fetch arrayBuffer directly when it is not possible to get progress.\n        buf = await resp.arrayBuffer();\n        cb &&\n            cb({\n                url,\n                total: buf.byteLength,\n                received: buf.byteLength,\n                delta: 0,\n                done: true,\n            });\n    }\n    return buf;\n};\n/**\n * toBlobURL fetches data from an URL and return a blob URL.\n *\n * Example:\n *\n * ```ts\n * await toBlobURL(\"http://localhost:3000/ffmpeg.js\", \"text/javascript\");\n * ```\n */\nexport const toBlobURL = async (url, mimeType, progress = false, cb) => {\n    const buf = progress\n        ? await downloadWithProgress(url, cb)\n        : await (await fetch(url)).arrayBuffer();\n    const blob = new Blob([buf], { type: mimeType });\n    return URL.createObjectURL(blob);\n};\n","export function blobToFile(blob, fileName = 'video.mp4') {\r\n    // 使用 Blob 创建一个 File 对象\r\n    return new File([blob], fileName, {type: blob.type});\r\n}","import {FFmpeg} from \"@ffmpeg/ffmpeg\";\r\nimport {fetchFile} from \"@ffmpeg/util\";\r\nimport {blobToFile} from \"./utils\";\r\n\r\nconst ffmpeg = new FFmpeg();\r\n\r\nawait ffmpeg.load({\r\n    coreURL: '/ffmpeg/ffmpeg-core.js',\r\n    wasmURL: '/ffmpeg/ffmpeg-core.wasm',\r\n    workerURL: '/ffmpeg/worker.js',\r\n    classWorkerURL: '/ffmpeg/worker.js'\r\n});\r\n\r\nexport async function checkFileType(file) {\r\n    const fileFFMPEG = await fetchFile(file);\r\n    await ffmpeg.writeFile('input.mp4', fileFFMPEG);\r\n    // 使用新版推荐命令格式\r\n    await ffmpeg.ffprobe([\"-v\",\r\n        \"error\",\r\n        \"-show_entries\", 'stream=codec_name',\r\n        \"-of\",\r\n        \"default=noprint_wrappers=1:nokey=1\",\r\n        \"-select_streams\", \"v:0\", // 只选取视频流\r\n        \"input.mp4\", \"-o\", \"output.json\"])\r\n    const uint8Array = await ffmpeg.readFile('output.json')\r\n    return new TextDecoder().decode(uint8Array)\r\n}\r\n\r\nexport async function splitFile(file, options = {\r\n    size: 60\r\n}) {\r\n    const fileType = file.type.split('/')[1];\r\n    const fileExtension = file.name.split('.').pop() || fileType;\r\n    const inputFileName = `input.${fileExtension}`;\r\n    const result = [];\r\n    const fileFFMPEG = await fetchFile(file);\r\n    const fileSize = fileFFMPEG.byteLength;\r\n    await ffmpeg.writeFile(inputFileName, fileFFMPEG);\r\n    await ffmpeg.ffprobe([\"-v\", \"error\", \"-show_entries\", \"format=duration\", \"-of\", \"default=noprint_wrappers=1:nokey=1\", inputFileName, \"-o\", \"output.txt\"]);\r\n    const durationUnit8Array = await ffmpeg.readFile(\"output.txt\");\r\n    const duration = new TextDecoder().decode(durationUnit8Array);\r\n    const targetSize = options.size * 1024 * 1024;\r\n    const numSegments = Math.ceil(fileSize / targetSize);\r\n    const segmentDuration = duration / numSegments;\r\n    for (let i = 0; i < numSegments; i++) {\r\n        const startTime = i * segmentDuration;\r\n        const outputFileName = `segment_${i + 1}.mp4`;\r\n        await ffmpeg.exec([\r\n            '-i', inputFileName,\r\n            '-ss', startTime.toString(),\r\n            '-t', segmentDuration.toString(),\r\n            '-c:v', 'copy',\r\n            '-c:a', 'copy',\r\n            outputFileName\r\n        ]);\r\n        const data = await ffmpeg.readFile(outputFileName);\r\n        const blob = new Blob([data.buffer], {type: 'video/mp4'});\r\n        const blobSizeMB = (blob.size / (1024 * 1024)).toFixed(0) + 'MB';\r\n        result.push({\r\n            file: blobToFile(blob),\r\n            size: blobSizeMB\r\n        })\r\n    }\r\n    return result;\r\n}\r\n\r\nwindow.checkFileType = checkFileType;\r\nwindow.splitFile = splitFile;"],"names":[],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5]}